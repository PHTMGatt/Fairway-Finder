// server/src/models/Trip.ts

import { Schema, model, Document, Types } from 'mongoose'

/**
 * Note; Subdocument for a golf course within a trip.
 */
export interface CourseSubdoc {
  _id: Types.ObjectId
  name: string
  address?: string
  location?: {
    lat: number
    lng: number
  }
}

/**
 * Note; Subdocument for an individual hole score.
 */
export interface ScoreSubdoc {
  hole: number
  score: number
}

/**
 * Note; Subdocument for a playerâ€™s scorecard entry.
 */
export interface PlayerSubdoc {
  name: string
  scores: ScoreSubdoc[]
}

/**
 * Note; Interface for a Trip document in MongoDB.
 */
export interface TripDoc extends Document {
  name: string               // Note; Descriptive trip name
  date: string               // Note; Trip date (ISO string)
  courses: CourseSubdoc[]    // Note; Courses planned for this trip
  players: PlayerSubdoc[]    // Note; Scorecard players
  createdAt: Date            // Note; Auto-generated by timestamps
  updatedAt: Date
}

/**
 * Note; Define schema for a course subdocument.
 *       `_id` is enabled so we can reference courses individually.
 */
const courseSchema = new Schema<CourseSubdoc>(
  {
    name: { type: String, required: true, trim: true },
    address: { type: String, trim: true },
    location: {
      lat: { type: Number },
      lng: { type: Number },
    },
  },
  { _id: true }
)

/**
 * Note; Define schema for a score subdocument.
 *       No `_id` needed for individual scores.
 */
const scoreSchema = new Schema<ScoreSubdoc>(
  {
    hole: { type: Number, required: true },
    score: { type: Number, required: true },
  },
  { _id: false }
)

/**
 * Note; Define schema for a player subdocument.
 *       Each player has a name and an array of hole scores.
 */
const playerSchema = new Schema<PlayerSubdoc>(
  {
    name: { type: String, required: true, trim: true },
    scores: { type: [scoreSchema], default: [] },
  },
  { _id: false }
)

/**
 * Note; Main Trip schema, embedding courses & players.
 *       Uses timestamps to track creation & updates automatically.
 */
const tripSchema = new Schema<TripDoc>(
  {
    name:   { type: String, required: true, trim: true },
    date:   { type: String, required: true },
    courses:{ type: [courseSchema], default: [] },
    players:{ type: [playerSchema], default: [] },
  },
  {
    timestamps: true,
    toJSON:  { virtuals: true },
    toObject:{ virtuals: true },
  }
)

/**
 * Note; Export the Trip model for use in resolvers and REST routes.
 */
const Trip = model<TripDoc>('Trip', tripSchema)
export default Trip
